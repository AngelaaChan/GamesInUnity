How was terrain generated using Unity?
Used a 2D grid of about 256 dimensions and used the diamond square algorithm to generate the height for each vertex. First, I initialized the height of each corner of the grid to a random value from -height to height. Next, I did the diamond step when I averaged the four corners of the grid to find the height of the middle point. Next, averaged the four points of the diamond to complete the square step. Repeated this for all the dimensions.

How was the camera implemented? 
Camera speed is implemented by reassigning rigid body’s velocity in response to key press. Using velocity instead of transformation allowed the use of Unity collision prediction system, which resulted in smooth motion on impact. 
Pitch and yaw is implemented by rotation in response to relative mouse movement away from first right mouse click. It is modeled after Unity’s scene panning mechanics.

How was the collision implemented?
The mesh generated by the terrain was pass to mesh collider.
Since terrain should not respond to force, it is set to kinmetics.
The camera has a sphere collider and a rigid body attached.
A bouncy physics material is added to the camera to allow for somooth collision response

How was the sun implemeted?
The sun pass its position to shaders in order to calculate reflection angle.
Sun rotate on x-axis 

How was the shader implemeted?
Water shader is from workshop 4
The height of the vertex is changed in the shader using a sine function
TarrainShader is from workshop 5 by Alexandre Mutel
The shader uses phong’s model. It gets the position of the light from Sun object.
Then in the fragment shader, phong model is applied as according the equation.

How was the waves implemeted?
Waves were generated using a script to increase level of triangles.
